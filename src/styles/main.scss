@use 'griddle/griddle-overlay' as *;
@use 'griddle/mixins' as *;
@use 'griddle/functions' as *;

@use 'reset';
@use 'fonts';
@use 'typography';
@use 'buttons';
@use 'forms';
@use 'widgets';
@use 'modal';
@use 'tooltip';
@use 'admin';
@use 'alerts';
@use 'vSelect';
@use 'ods/ods-forms';
@use 'ods/ods-hr';
@use 'ods/ods-badge';

/*
 * Ultimately we'd like to import Punkt as a whole by doing:
 *
 *   @use '@oslokommune/punkt-css/dist/scss/pkt';
 *
 * Doing so now wreaks havoc with our existing styles, so it'll have
 * to be phased in piece by piece.
 */
@use '@oslokommune/punkt-css/dist/scss/base/_colors';

@function hexToRGB($hex) {
  @return red($hex), green($hex), blue($hex);
}

html,
body {
  margin: 0;
}

button,
input,
textarea,
body {
  font-family: 'OsloSans', 'Helvetica', 'Arial', sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

button {
  line-height: 1.1;
}

html {
  overflow-y: scroll;
}

*,
*::before,
*::after {
  box-sizing: border-box;
}

/* When mouse is detected, ALL focused elements have outline removed. */

/* You could apply this selector only to buttons, if you wanted. */
body.using-mouse :focus {
  outline: none;
}

*:focus {
  outline: 2px solid var(--color-link);
}

.toast {
  font-weight: 500 !important;
  font-size: 1rem !important;
}

.table,
.md table {
  width: 100%;
  margin: 1rem 0 1rem;
  border-bottom: 1px solid var(--color-border);

  th {
    font-weight: 500;
  }

  thead {
    th {
      border-top: none;
    }
  }

  th,
  td {
    height: 3rem;
    padding: 0 0.5rem;
    text-align: left;
    vertical-align: middle;
    border-top: 1px solid var(--color-border);
  }
}

.main {
  position: relative;
  width: span(12);

  @media screen and (min-width: bp(m)) {
    width: span(8);
    margin-right: span(0, 1);
    margin-left: span(0, 1);
  }
}

.aside {
  width: span(12);

  @media screen and (min-width: bp(m)) {
    width: span(2);
  }
}

.container {
  @include container();
  display: flex;
  flex-wrap: wrap;
  align-content: flex-start;
  margin-top: 0.5rem;
}

.main__item {
  padding: 1.5rem 1.75rem;
  color: var(--color-text);
  background: linear-gradient(
    180deg,
    rgba(255, 255, 255, 1) 0%,
    rgba(255, 255, 255, 0) 60%,
    rgba(255, 255, 255, 0) 100%
  );
}

.main__second {
  display: flex;
  flex-direction: column;
  width: span(12);
  padding: 2rem;
  background: white;
  border-radius: 3px;
  box-shadow: 0 2px 4px rgba(var(--color-grey-400-rgb), 0.3);

  @media screen and (min-width: bp(s)) {
    width: span(6);
    margin-left: span(3, 1);
  }

  @media screen and (min-width: bp(m)) {
    width: span(4);
    margin-left: span(4, 1);
  }
}

:root {
  // Custom colors with no similars in Punkt.
  --color-purple-medium: #4a72a1;
  --color-bg: #f3f3f3;
  --color-border: #dae3e5;
  --color-grey-50: #f7f7f7;
  --color-grey-100: #e1e1e6;
  --color-grey-300: #adadb3;
  --color-link: #0075eb;

  // Colors in RGB value - add more if needed. SCSS rgba() function
  // can read hex numbers with CSS Variables.
  --color-red-rgb: #{hexToRGB(#ff8274)};
  --color-yellow-rgb: #{hexToRGB(#f9c66b)};
  --color-border-rgb: #{hexToRGB(#dae3e5)};
  // This one is weird, it doesn't match Punkt's `color-grayscale-40`
  // at all.
  --color-grey-400-rgb: #{hexToRGB(#939399)};
  --color-grayscale-50-rgb: #{hexToRGB(#808080)};
  --color-grayscale-80-rgb: #{hexToRGB(#333333)};

  --color-text: var(--color-blue-dark);
  --color-text-secondary: var(--color-white);
  --color-primary: var(--color-blue-dark);
  --color-primary-dark: var(--color-active);
  --color-secondary: var(--color-blue);
  --color-secondary-light: var(--color-blue-light);
  --color-progress-background: var(--color-purple-medium);
}
