// TODO: Migrate from email-check to uid-check
// Allow both at first and then remove email-check later on
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Get user document
    function getUserDoc() {
      return get(/databases/$(database)/documents/users/$(request.auth.token.email));
    }

    // Check if user is a super admin
    function isSuperAdmin() {
      let userDoc = getUserDoc();
      let hasProperty = 'superAdmin' in userDoc.data;
      let userIsSuperAdmin = hasProperty && userDoc.data.superAdmin == true;
      return isSignedIn() && userIsSuperAdmin;
    }

    // CHeck if user is admin of at least one organization
    function isAdmin() {
      let userDoc = getUserDoc();
      let userIsAdmin =  'admin' in userDoc.data && userDoc.data.admin.size() > 0;
      return isSignedIn() && userIsAdmin;
    }

    // Check if user is admin of an organization or organization of a product/department
    function isAdminOfOrganization() {
      let userDoc = getUserDoc();
      let userIsAdmin = isAdmin();

      // Check if the document the user tries to access has an organization - this means that is is a product or department
      let hasOrgProperty = 'organization' in request.resource.data;
      let isAdminFromOrgOfProdOrDep = userIsAdmin && hasOrgProperty && getAfter(request.resource.data.organization).id in userDoc.data.admin;

      // Check if the user has access to the document which is an organization (given that the first check is false)
      let isAdminOfOrg = userIsAdmin && request.resource.data.id in userDoc.data.admin;

      return isSignedIn() && (isAdminOfOrg || isAdminFromOrgOfProdOrDep);
    }

    //
    // Return true if the current user is an admin of the organization that
    // `document` belongs to.
    //
    // The document can belong to an organization either by a transitive link
    // (`document` → `parent` → `organization`) or directly
    // (`document` → `parent`).
    //
    function isAdminOfParent(document, type) {
      let userDoc = getUserDoc();
      let userIsAdmin = isAdmin();
      let item = getAfter(/databases/$(database)/documents/$(type)/$(document));
      let parentDoc = getAfter(item.data.parent);

      // Check whether the parent of the document the user tries to access has
      // an organization – this means that it is a product or department.
      let hasOrgDocumentInParent = 'organization' in parentDoc.data;
      let isAdminFromOrgOfProdOrDep = userIsAdmin && hasOrgDocumentInParent && getAfter(parentDoc.data.organization).id in userDoc.data.admin;

      // Check whether the user has access to the parent, which is an
      // organization (given that the first check is false).
      let isAdminOfParent = userIsAdmin && !isAdminFromOrgOfProdOrDep && parentDoc.id in userDoc.data.admin;

      return isSignedIn() && (isAdminFromOrgOfProdOrDep || isAdminOfParent);
    }

    //
    // Return true if the current user is an admin of the organization that the
    // document's `item` belongs to *after* performing the action.
    //
    function isAdminOfItemAfter(document, type) {
      let userDoc = getUserDoc();
      let userIsAdmin = isAdmin();
      let item = getAfter(/databases/$(database)/documents/$(type)/$(document));
      let itemDoc = getAfter(item.data.item);

      // Check whether the item of the document the user tries to access has
      // an organization – this means that it is a product or department.
      let hasOrgDocumentInItem = 'organization' in itemDoc.data;
      let isAdminFromOrgOfProdOrDep = userIsAdmin && hasOrgDocumentInItem && getAfter(itemDoc.data.organization).id in userDoc.data.admin;

      // Check whether the user has access to the item, which is an
      // organization (given that the first check is false).
      let isAdminOfItem = userIsAdmin && !isAdminFromOrgOfProdOrDep && itemDoc.id in userDoc.data.admin;

      return isSignedIn() && (isAdminFromOrgOfProdOrDep || isAdminOfItem);
    }

    //
    // Return true if the current user is an admin of the organization that the
    // document's `item` belongs to *before* performing the action.
    //
    function isAdminOfItemBefore(document, type) {
      let userDoc = getUserDoc();
      let userIsAdmin = isAdmin();
      let item = get(/databases/$(database)/documents/$(type)/$(document));
      let itemDoc = get(item.data.item);

      // Check whether the item of the document the user tries to access has
      // an organization – this means that it is a product or department.
      let hasOrgDocumentInItem = 'organization' in itemDoc.data;
      let isAdminFromOrgOfProdOrDep = userIsAdmin && hasOrgDocumentInItem && get(itemDoc.data.organization).id in userDoc.data.admin;

      // Check whether the user has access to the item, which is an
      // organization (given that the first check is false).
      let isAdminOfItem = userIsAdmin && !isAdminFromOrgOfProdOrDep && itemDoc.id in userDoc.data.admin;

      return isSignedIn() && (isAdminFromOrgOfProdOrDep || isAdminOfItem);
    }

    //
    // Return true if the current user is an admin of the parent of the
    // document's objective.
    //
    function isAdminOfObjectiveParent(document, type) {
      let userDoc = getUserDoc();
      let userIsAdmin = isAdmin();
      let doc = getAfter(/databases/$(database)/documents/$(type)/$(document));
      let objectiveDoc = getAfter(doc.data.objective);
      let parentDoc = getAfter(objectiveDoc.data.parent);

      // Check whether the parent of the document the user tries to access has
      // an organization – this means that it is a product or department.
      let hasOrgDocumentInParent = 'organization' in parentDoc.data;
      let isAdminFromOrgOfProdOrDep = userIsAdmin && hasOrgDocumentInParent && getAfter(parentDoc.data.organization).id in userDoc.data.admin;

      // Check whether the user has access to the parent, which is an
      // organization (given that the first check is false).
      let isAdminOfParent = userIsAdmin && !isAdminFromOrgOfProdOrDep && parentDoc.id in userDoc.data.admin;

      return isSignedIn() && (isAdminFromOrgOfProdOrDep || isAdminOfParent);
    }

    //
    // Return true if the current user is an admin of the parent of the
    // document's objective *before* performing the action.
    //
    function isAdminOfObjectiveParentBefore(document, type) {
      let userDoc = getUserDoc();
      let userIsAdmin = isAdmin();
      let doc = get(/databases/$(database)/documents/$(type)/$(document));
      let objectiveDoc = get(doc.data.objective);
      let parentDoc = get(objectiveDoc.data.parent);

      // Check whether the parent of the document the user tries to access has
      // an organization – this means that it is a product or department.
      let hasOrgDocumentInParent = 'organization' in parentDoc.data;
      let isAdminFromOrgOfProdOrDep = userIsAdmin && hasOrgDocumentInParent && get(parentDoc.data.organization).id in userDoc.data.admin;

      // Check whether the user has access to the parent, which is an
      // organization (given that the first check is false).
      let isAdminOfParent = userIsAdmin && !isAdminFromOrgOfProdOrDep && parentDoc.id in userDoc.data.admin;

      return isSignedIn() && (isAdminFromOrgOfProdOrDep || isAdminOfParent);
    }

    // Is user signed in
    function isSignedIn() {
      // TODO: Must be a verified (whitelisted) user
      return request.auth.uid != null;
    }

    // Is user part of the team in the organization/department/product
    function isTeamMember() {
      let userRef = /databases/$(database)/documents/users/$(request.auth.token.email);
      let userIsTeamMember = userRef in request.resource.data.team;
      return userIsTeamMember;
    }

    //
    // Return true if the current user is a member of `document.parent`.
    //
    function isMemberOfParent(document, type) {
      let userRef = /databases/$(database)/documents/users/$(request.auth.token.email);
      let doc = getAfter(/databases/$(database)/documents/$(type)/$(document));
      let parentDoc = getAfter(doc.data.parent);
      let userIsMemberOfParent = userRef in parentDoc.data.team;
      return userIsMemberOfParent;
    }

    //
    // Return true if the current user is a member of `document.parent`
    // *before* performing the action.
    //
    function isMemberOfParentBefore(document, type) {
      let userRef = /databases/$(database)/documents/users/$(request.auth.token.email);
      let doc = get(/databases/$(database)/documents/$(type)/$(document));
      let parentDoc = get(doc.data.parent);
      let userIsMemberOfParent = userRef in parentDoc.data.team;
      return userIsMemberOfParent;
    }

    //
    // Return true if the `objective`'s parent is either `item` or its parent
    // *after* performing the action.
    //
    function objectiveParentIsItemOrItemParent(document, type) {
      let doc = getAfter(/databases/$(database)/documents/$(type)/$(document));

      let itemDoc = getAfter(doc.data.item);
      let objectiveDoc = getAfter(doc.data.objective);
      let objectiveParentDoc = getAfter(objectiveDoc.data.parent);

      let isProduct = 'department' in itemDoc.data;
      let isDepartment = 'organization' in itemDoc.data;

      let objectiveParentIsItemParent = (isProduct && getAfter(itemDoc.data.department) == objectiveParentDoc)
          || (!isProduct && isDepartment && getAfter(itemDoc.data.organization) == objectiveParentDoc);

      return objectiveParentDoc == itemDoc || objectiveParentIsItemParent;
    }

    //
    // Return true if the current user is a member of `item` *after* performing
    // the action.
    //
    function isMemberOfItemAfter(document, type) {
      let userRef = /databases/$(database)/documents/users/$(request.auth.token.email);
      let doc = getAfter(/databases/$(database)/documents/$(type)/$(document));

      let itemDoc = getAfter(doc.data.item);
      let isMemberOfItem = userRef in itemDoc.data.team;

      return isMemberOfItem;
    }

    //
    // Return true if the current user is a member of `item` *before*
    // performing the action.
    //
    function isMemberOfItemBefore(document, type) {
      let userRef = /databases/$(database)/documents/users/$(request.auth.token.email);
      let doc = get(/databases/$(database)/documents/$(type)/$(document));

      let itemDoc = get(doc.data.item);
      let isMemberOfItem = userRef in itemDoc.data.team;

      return isMemberOfItem;
    }

    function isSelf(document) {
      let user = document == request.auth.token.email;
      return user;
    }


    match /requestAccess/{document} {
      allow read: if isSuperAdmin();
      allow write: if true;
    }

    match /audit/{document} {
      allow read: if isSignedIn();
    }

    match /users/{user} {
      allow read: if isSignedIn();
      allow create: if isSuperAdmin() ||
        ((isSelf(user) || isAdmin()) &&
         (!request.resource.data.keys().hasAny(['superAdmin'])));
      allow update: if isSuperAdmin() ||
        ((isSelf(user) || isAdmin()) &&
         (!request.resource.data.diff(resource.data).affectedKeys().hasAny(
           ['superAdmin'])));
      allow delete: if isSuperAdmin() || isSelf(user) || isAdmin();
    }

    match /organizations/{document} {
      allow read: if isSignedIn();
      allow create: if isSuperAdmin();
      allow update: if isSuperAdmin() || isTeamMember() || isAdminOfOrganization();
      allow delete: if isSuperAdmin();
    }

    match /departments/{document} {
      allow read: if isSignedIn();
      allow create: if isSuperAdmin() || isTeamMember() || isAdminOfOrganization();
      allow update: if isSuperAdmin() || isTeamMember() || isAdminOfOrganization();
      allow delete: if isSuperAdmin();
    }

    match /products/{document} {
      allow read: if isSignedIn();
      allow create: if isSuperAdmin() || isTeamMember() || isAdminOfOrganization();
      allow update: if isSuperAdmin() || isTeamMember() || isAdminOfOrganization();
      allow delete: if isSuperAdmin();
    }

    match /keyResults/{document} {
      allow read: if isSignedIn();
      allow create: if isSuperAdmin() || isMemberOfParent(document, 'keyResults') || isAdminOfParent(document, 'keyResults');
      allow update: if isSuperAdmin() || isMemberOfParent(document, 'keyResults') || isAdminOfParent(document, 'keyResults');
      allow delete: if isSuperAdmin();
    }

    match /keyResults/{document}/progress/{progress} {
      allow read: if isSignedIn();
      allow create: if isSuperAdmin() || isMemberOfParent(document, 'keyResults') || isAdminOfParent(document, 'keyResults');
      allow update: if isSuperAdmin() || isMemberOfParent(document, 'keyResults') || isAdminOfParent(document, 'keyResults');
      allow delete: if isSuperAdmin() || isMemberOfParent(document, 'keyResults') || isAdminOfParent(document, 'keyResults');
    }

    match /objectives/{document} {
      allow read: if isSignedIn();
      allow create: if isSuperAdmin() || isMemberOfParent(document, 'objectives') || isAdminOfParent(document, 'objectives');
      allow update: if isSuperAdmin() || isMemberOfParentBefore(document, 'objectives') || isAdminOfParent(document, 'objectives');
      allow delete: if isSuperAdmin();
    }

    match /objectiveContributors/{document} {
      allow read: if isSignedIn();
      allow create: if isSuperAdmin() || (isMemberOfItemAfter(document, 'objectiveContributors') && objectiveParentIsItemOrItemParent(document, 'objectiveContributors')) || (isAdminOfItemAfter(document, 'objectiveContributors') && isAdminOfObjectiveParent(document, 'objectiveContributors'));
      allow delete: if isSuperAdmin() || isMemberOfItemBefore(document, 'objectiveContributors') || (isAdminOfItemBefore(document, 'objectiveContributors') && isAdminOfObjectiveParentBefore(document, 'objectiveContributors'));
    }

    match /periods/{document} {
      allow read: if isSignedIn();
    }

    match /kpis/{document} {
      allow read: if isSignedIn();
      allow create: if isSuperAdmin() || isMemberOfParent(document, 'kpis') || isAdminOfParent(document, 'kpis');
      allow update: if isSuperAdmin() || isMemberOfParent(document, 'kpis') || isAdminOfParent(document, 'kpis');
      allow delete: if isSuperAdmin();
    }

    match /kpis/{document}/progress/{progress} {
      allow read: if isSignedIn();
      allow create: if isSuperAdmin() || isMemberOfParent(document, 'kpis') || isAdminOfParent(document, 'kpis');
      allow update: if isSuperAdmin() || isMemberOfParent(document, 'kpis') || isAdminOfParent(document, 'kpis');
      allow delete: if isSuperAdmin() || isMemberOfParent(document, 'kpis') || isAdminOfParent(document, 'kpis');
    }

    match /kpis/{document}/goals/{goal} {
      allow read: if isSignedIn();
      allow create: if isSuperAdmin() || isMemberOfParent(document, 'kpis') || isAdminOfParent(document, 'kpis');
      allow update: if isSuperAdmin() || isMemberOfParent(document, 'kpis') || isAdminOfParent(document, 'kpis');
      allow delete: if isSuperAdmin() || isMemberOfParent(document, 'kpis') || isAdminOfParent(document, 'kpis');
    }

    match /apiClients/{document} {
      allow read: if isSignedIn();
      allow write: if isSuperAdmin() || isMemberOfParent(document, 'apiClients') || isAdminOfParent(document, 'apiClients');

      match /secrets/{key} {
        allow read: if false;
        allow write: if isSuperAdmin() || isMemberOfParent(document, 'apiClients') || isAdminOfParent(document, 'apiClients');
      }
    }

    match /slugs/{document} {
      allow read: if true;
      allow write: if false;
    }

    match /{document=**} {
      allow read: if false;
      allow write: if false;
    }
  }
}
